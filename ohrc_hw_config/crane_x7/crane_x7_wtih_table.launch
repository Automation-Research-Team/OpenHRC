<?xml version="1.0"?>
<launch>

  <!-- MoveIt configurations-->
  <arg name="use_gui" default="false" />
  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find crane_x7_moveit_config)/default_warehouse_mongo_db" />
  <!-- By default, we are not in debug mode -->
  <arg name="moveit_debug" default="false" />

  <!-- Gazebo configurations-->
  <arg name="gazebo_debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="headless" default="false"/>

  <!-- Change the controller type of gripper from position to effort -->
  <arg name="use_effort_gripper" default="false" />

  <arg name="use_gazebo" default="true" />
    <!-- Allow user to turn fake_execution on and off -->
  <arg name="fake_execution" default="false" />

  <include file="$(find crane_x7_control)/launch/crane_x7_fake_control.launch">
    <arg name="use_effort_gripper" value="$(arg use_effort_gripper)" />
  </include>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find crane_x7_gazebo)/worlds/table.world"/>
    <arg name="debug" value="$(arg gazebo_debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find crane_x7_description)/urdf/crane_x7.urdf.xacro' use_effort_gripper:=$(arg use_effort_gripper)"
    />
 <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model crane_x7 -param robot_description -z 1.02"/>

    <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="/source_list" unless="$(arg fake_execution)">[/crane_x7/joint_states]</rosparam>
    <rosparam param="/source_list" if="$(arg fake_execution)">[/move_group/fake_controller_joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="/source_list" unless="$(arg fake_execution)">[/crane_x7/joint_states]</rosparam>
    <rosparam param="/source_list" if="$(arg fake_execution)">[/move_group/fake_controller_joint_states]</rosparam>
  </node>
  
  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" if="$(arg fake_execution)"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" if="$(arg use_gazebo)"/>

</launch>